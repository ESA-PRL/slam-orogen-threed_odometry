#! /usr/bin/env ruby

require 'orocos'
require 'orocos/async'
require 'vizkit'
require 'optparse'

hostname = nil
options = OptionParser.new do |opt|
    opt.banner = <<-EOD
robot-odometer [options]  </path/to/model/file> <task context name of the odometry component>
    EOD
    opt.on '--host=HOSTNAME', String, 'the host we should contact to find RTT tasks' do |host|
        hostname = host
    end
    opt.on '--help', 'this help message' do
        puts opt
    end
end

args = options.parse(ARGV)
model_file = args.shift
task_context_name = args.shift

if !model_file
    puts "missing model file argument"
    puts options
    exit 1
end


if !task_context_name
    puts "missing task context name"
    puts options
    exit 1
elsif
    if hostname
        Orocos::CORBA.name_service.ip = hostname
    end
end

Orocos.initialize
puts "Getting task with name #{task_context_name}"
task = Orocos::Async.proxy task_context_name


view3d = Vizkit.vizkit3d_widget
view3d.show
vis_gui = Vizkit.default_loader.RobotVisualization
vis_gui.modelFile = model_file.dup
vis_gui.jointsSize = 0.02
#view3d.setPluginDataFrame("body", vis_gui )

main = Qt::Widget.new
layout = Qt::VBoxLayout.new(main)
layout.add_widget(view3d)

ctrl_gui = Vizkit.default_loader.ControlUi
override_vel_limits=0
only_positive=true
no_effort=true
no_velocity=false
ctrl_gui.configureUi(override_vel_limits, only_positive, no_effort, no_velocity)
ctrl_gui.initFromURDF(model_file.dup)
layout.add_widget(ctrl_gui)
main.show

#Contact points FL Wheel (RED)
c0FL = Vizkit.default_loader.RigidBodyStateVisualization
c0FL.displayCovariance(true)
c0FL.setPluginName("FLFoot0")
c0FL.setColor(Eigen::Vector3.new(0, 0, 0))
c0FL.resetModel(0.1)
Vizkit.vizkit3d_widget.setPluginDataFrame("body", c0FL)

#Contact points FR Wheel (GREEN)
c0FR = Vizkit.default_loader.RigidBodyStateVisualization
c0FR.setColor(Eigen::Vector3.new(0, 0, 0))
c0FR.setPluginName("FRFoot0")
c0FR.resetModel(0.1)
c0FR.displayCovariance(true)
Vizkit.vizkit3d_widget.setPluginDataFrame("body", c0FR)

#Contact points ML Wheel (GREEN)
c0ML = Vizkit.default_loader.RigidBodyStateVisualization
c0ML.setColor(Eigen::Vector3.new(0, 0, 0))
c0ML.setPluginName("MLFoot0")
c0ML.resetModel(0.1)
c0ML.displayCovariance(true)
Vizkit.vizkit3d_widget.setPluginDataFrame("body", c0ML)

#Contact points MR Wheel (GREEN)
c0MR = Vizkit.default_loader.RigidBodyStateVisualization
c0MR.setColor(Eigen::Vector3.new(0, 0, 0))
c0MR.setPluginName("MRFoot0")
c0MR.resetModel(0.1)
c0MR.displayCovariance(true)
Vizkit.vizkit3d_widget.setPluginDataFrame("body", c0MR)

#Contact points RL Wheel (BLUE)
c0RL = Vizkit.default_loader.RigidBodyStateVisualization
c0RL.setColor(Eigen::Vector3.new(0, 0, 0))
c0RL.setPluginName("RLFoot0")
c0RL.resetModel(0.1)
c0RL.displayCovariance(true)
Vizkit.vizkit3d_widget.setPluginDataFrame("body", c0RL)

#Contact points RR Wheel (WHITE)
c0RR = Vizkit.default_loader.RigidBodyStateVisualization
c0RR.setColor(Eigen::Vector3.new(0, 0, 0))
c0RR.setPluginName("RRFoot0")
c0RR.resetModel(0.1)
c0RR.displayCovariance(true)
Vizkit.vizkit3d_widget.setPluginDataFrame("body", c0RR)

joint = Types::Base::Samples::Joints.new
imuSamples = Types::Base::Samples::IMUSensors.new
imuSamples.acc = Eigen::Vector3.new(0.00, 0.00, 9.81)
imuSamples.gyro = Eigen::Vector3.new(0.00, 0.00, 0.00)
orientation_rbs = Types::Base::Samples::RigidBodyState.new
orientation_rbs.position = Eigen::Vector3.new(0.00, 0.00, 0.00)
orientation_rbs.orientation = Eigen::Quaternion.Identity()

ctrl_gui.configureUi(override_vel_limits, only_positive, no_effort, no_velocity)
ctrl_gui.initFromURDF(model_file.dup)
ctrl_gui.connect(SIGNAL('sendSignal()')) do
    joint = ctrl_gui.getJoints()
    vis_gui.updateData(joint)
    puts "Value of local variable is #{joint.names}"
    task.on_reachable do
        puts "Task #{task.name} has #{task.port_names}"
        port_joints = task.port('joints_samples')
        joint.time = Time.now;
        port_joints.write(joint) do |result|
            puts "Sent joints to task #{task.name}"
        end
        port_attitude = task.port('orientation_samples')
        orientation_rbs.time = Time.now;
        port_attitude.write(orientation_rbs) do |result|
            puts "Sent orientation to task #{task.name}"
        end
    end
end

task.on_reachable do
    #Access to the chains sub_ports
    vector_rbs = task.port('fkchains_rbs_out')
    vector_rbs.wait

    Vizkit.display vector_rbs.sub_port([:rbsChain, 0]), :widget => c0FL
    Vizkit.display vector_rbs.sub_port([:rbsChain, 1]), :widget => c0FR
    Vizkit.display vector_rbs.sub_port([:rbsChain, 2]), :widget => c0ML
    Vizkit.display vector_rbs.sub_port([:rbsChain, 3]), :widget => c0MR
    Vizkit.display vector_rbs.sub_port([:rbsChain, 4]), :widget => c0RL
    Vizkit.display vector_rbs.sub_port([:rbsChain, 5]), :widget => c0RR
end

# disable the GUI until the task is reachable
task.on_reachable {main.setEnabled(true)}
task.on_unreachable {main.setEnabled(false)}

Vizkit.exec


